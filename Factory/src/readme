工厂设计模式：(是二十三中设计模式之一)
耦合性(向上转型)：指一个类(A)严重依赖另外一个类(B),如果需要替换掉B类的话,需要修改A的代码。
简单点说,new 出来的对象都有耦合性,因为想给new出来的对象替换掉,就需要修改类中的源代码。

工厂模式是
1：专门隐藏实例化对象的过程
	假如以后我们写一个类,在创建对象的时候需要读取一些文件,然后接收很多参数,这个时候我们
	就可以将创建对象的过程抽离出来,然后形成一个工厂类。
2：解决耦合性的问题：

一：简单工厂
	1：实现类的共同接口
	2：具体的实现类
	3：工厂类
优点：代码简单,并且潜力强大
缺点：如果需要增加水果的实现类,就需要修改工厂类,不符合开闭原则(可解决)
二：工厂方法(将实例化对象的工作移交到自己的子类之中)
	1：实现类的共同接口		水果
	2：具体的实现类			水果的实现类, 苹果 香蕉等	  	
	3：抽象工厂				所有工厂的核心接口,具体工厂需要实现抽象工厂
	4：具体工厂				抽象工厂的实现类,负责实例化对象
优点：符合开闭原则,如果需要添加具体实现类的话,不需要修改已有的工厂类，只需要添加即可。
缺点：体积大,有多少个产品类,就有多少工厂类,并且一个工厂只针对一种产品,无法解决多产品问题。

三：抽象工厂(了解即可,专门解决一个工厂只针对一个产品的问题)
产品族：
宝马X1：	发动机X1,空调X1。。。。
宝马X2：	发动机X2,空调X2。。。。
所谓的产品族,就是由一系列产品组成的,并且这些产品都是固定的。
优点：每个工厂都能实例化一组对象。
缺点：若产品扩充,需要修改所有的工厂实现类(不利于修改维护)。
没有必要去操心这么多工厂,我们需要在什么时候使用哪一种,因为以后我们会使用Spring提供的
工厂,我们只需要知道以下几点即可
1：工厂模式有几种。
2：三种模式有什么区别
3：工厂模式可以解决什么问题(为什么需要工厂模式)

改进简单工厂:

